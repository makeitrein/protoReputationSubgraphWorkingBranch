// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get approved(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class ClaimableStateChanged extends ethereum.Event {
  get params(): ClaimableStateChanged__Params {
    return new ClaimableStateChanged__Params(this);
  }
}

export class ClaimableStateChanged__Params {
  _event: ClaimableStateChanged;

  constructor(event: ClaimableStateChanged) {
    this._event = event;
  }

  get claimableActive(): boolean {
    return this._event.parameters[0].value.toBoolean();
  }
}

export class ContributorsClaimStart extends ethereum.Event {
  get params(): ContributorsClaimStart__Params {
    return new ContributorsClaimStart__Params(this);
  }
}

export class ContributorsClaimStart__Params {
  _event: ContributorsClaimStart;

  constructor(event: ContributorsClaimStart) {
    this._event = event;
  }

  get _timestamp(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class ContributorsClaimStop extends ethereum.Event {
  get params(): ContributorsClaimStop__Params {
    return new ContributorsClaimStop__Params(this);
  }
}

export class ContributorsClaimStop__Params {
  _event: ContributorsClaimStop;

  constructor(event: ContributorsClaimStop) {
    this._event = event;
  }

  get _timestamp(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class LandPublicSaleStart extends ethereum.Event {
  get params(): LandPublicSaleStart__Params {
    return new LandPublicSaleStart__Params(this);
  }
}

export class LandPublicSaleStart__Params {
  _event: LandPublicSaleStart;

  constructor(event: LandPublicSaleStart) {
    this._event = event;
  }

  get _saleDuration(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _saleStartTime(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class LandPublicSaleStop extends ethereum.Event {
  get params(): LandPublicSaleStop__Params {
    return new LandPublicSaleStop__Params(this);
  }
}

export class LandPublicSaleStop__Params {
  _event: LandPublicSaleStop;

  constructor(event: LandPublicSaleStop) {
    this._event = event;
  }

  get _currentPrice(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _timeElapsed(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class PublicSaleMint extends ethereum.Event {
  get params(): PublicSaleMint__Params {
    return new PublicSaleMint__Params(this);
  }
}

export class PublicSaleMint__Params {
  _event: PublicSaleMint;

  constructor(event: PublicSaleMint) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get numLands(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get mintPrice(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class StartingIndexSetAlphaBeta extends ethereum.Event {
  get params(): StartingIndexSetAlphaBeta__Params {
    return new StartingIndexSetAlphaBeta__Params(this);
  }
}

export class StartingIndexSetAlphaBeta__Params {
  _event: StartingIndexSetAlphaBeta;

  constructor(event: StartingIndexSetAlphaBeta) {
    this._event = event;
  }

  get _alphaOffset(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _betaOffset(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class StartingIndexSetPublicSale extends ethereum.Event {
  get params(): StartingIndexSetPublicSale__Params {
    return new StartingIndexSetPublicSale__Params(this);
  }
}

export class StartingIndexSetPublicSale__Params {
  _event: StartingIndexSetPublicSale;

  constructor(event: StartingIndexSetPublicSale) {
    this._event = event;
  }

  get _startingIndex(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Contract__metadataHashesResult {
  value0: Bytes;
  value1: Bytes;
  value2: BigInt;
  value3: BigInt;

  constructor(value0: Bytes, value1: Bytes, value2: BigInt, value3: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromFixedBytes(this.value0));
    map.set("value1", ethereum.Value.fromFixedBytes(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }
}

export class Contract extends ethereum.SmartContract {
  static bind(address: Address): Contract {
    return new Contract("Contract", address);
  }

  MAX_ALPHA_NFT_AMOUNT(): BigInt {
    let result = super.call(
      "MAX_ALPHA_NFT_AMOUNT",
      "MAX_ALPHA_NFT_AMOUNT():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_MAX_ALPHA_NFT_AMOUNT(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MAX_ALPHA_NFT_AMOUNT",
      "MAX_ALPHA_NFT_AMOUNT():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MAX_BETA_NFT_AMOUNT(): BigInt {
    let result = super.call(
      "MAX_BETA_NFT_AMOUNT",
      "MAX_BETA_NFT_AMOUNT():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_MAX_BETA_NFT_AMOUNT(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MAX_BETA_NFT_AMOUNT",
      "MAX_BETA_NFT_AMOUNT():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MAX_FUTURE_LANDS(): BigInt {
    let result = super.call(
      "MAX_FUTURE_LANDS",
      "MAX_FUTURE_LANDS():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_MAX_FUTURE_LANDS(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MAX_FUTURE_LANDS",
      "MAX_FUTURE_LANDS():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MAX_LANDS(): BigInt {
    let result = super.call("MAX_LANDS", "MAX_LANDS():(uint256)", []);

    return result[0].toBigInt();
  }

  try_MAX_LANDS(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("MAX_LANDS", "MAX_LANDS():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MAX_LANDS_WITH_FUTURE(): BigInt {
    let result = super.call(
      "MAX_LANDS_WITH_FUTURE",
      "MAX_LANDS_WITH_FUTURE():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_MAX_LANDS_WITH_FUTURE(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MAX_LANDS_WITH_FUTURE",
      "MAX_LANDS_WITH_FUTURE():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MAX_MINT_PER_BLOCK(): BigInt {
    let result = super.call(
      "MAX_MINT_PER_BLOCK",
      "MAX_MINT_PER_BLOCK():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_MAX_MINT_PER_BLOCK(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MAX_MINT_PER_BLOCK",
      "MAX_MINT_PER_BLOCK():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MAX_PUBLIC_SALE_AMOUNT(): BigInt {
    let result = super.call(
      "MAX_PUBLIC_SALE_AMOUNT",
      "MAX_PUBLIC_SALE_AMOUNT():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_MAX_PUBLIC_SALE_AMOUNT(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MAX_PUBLIC_SALE_AMOUNT",
      "MAX_PUBLIC_SALE_AMOUNT():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  RESERVED_CONTRIBUTORS_AMOUNT(): BigInt {
    let result = super.call(
      "RESERVED_CONTRIBUTORS_AMOUNT",
      "RESERVED_CONTRIBUTORS_AMOUNT():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_RESERVED_CONTRIBUTORS_AMOUNT(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "RESERVED_CONTRIBUTORS_AMOUNT",
      "RESERVED_CONTRIBUTORS_AMOUNT():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  adminClaimStarted(): boolean {
    let result = super.call(
      "adminClaimStarted",
      "adminClaimStarted():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_adminClaimStarted(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "adminClaimStarted",
      "adminClaimStarted():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  alphaClaimed(param0: BigInt): boolean {
    let result = super.call("alphaClaimed", "alphaClaimed(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBoolean();
  }

  try_alphaClaimed(param0: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("alphaClaimed", "alphaClaimed(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  alphaClaimedAmount(): BigInt {
    let result = super.call(
      "alphaClaimedAmount",
      "alphaClaimedAmount():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_alphaClaimedAmount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "alphaClaimedAmount",
      "alphaClaimedAmount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  alphaContract(): Address {
    let result = super.call("alphaContract", "alphaContract():(address)", []);

    return result[0].toAddress();
  }

  try_alphaContract(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "alphaContract",
      "alphaContract():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  alphaOffset(): BigInt {
    let result = super.call("alphaOffset", "alphaOffset():(uint256)", []);

    return result[0].toBigInt();
  }

  try_alphaOffset(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("alphaOffset", "alphaOffset():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOf(owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  betaClaimed(param0: BigInt): boolean {
    let result = super.call("betaClaimed", "betaClaimed(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBoolean();
  }

  try_betaClaimed(param0: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("betaClaimed", "betaClaimed(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  betaClaimedAmount(): BigInt {
    let result = super.call(
      "betaClaimedAmount",
      "betaClaimedAmount():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_betaClaimedAmount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "betaClaimedAmount",
      "betaClaimedAmount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  betaContract(): Address {
    let result = super.call("betaContract", "betaContract():(address)", []);

    return result[0].toAddress();
  }

  try_betaContract(): ethereum.CallResult<Address> {
    let result = super.tryCall("betaContract", "betaContract():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  betaNftIdCurrent(): BigInt {
    let result = super.call(
      "betaNftIdCurrent",
      "betaNftIdCurrent():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_betaNftIdCurrent(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "betaNftIdCurrent",
      "betaNftIdCurrent():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  betaOffset(): BigInt {
    let result = super.call("betaOffset", "betaOffset():(uint256)", []);

    return result[0].toBigInt();
  }

  try_betaOffset(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("betaOffset", "betaOffset():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  claimableActive(): boolean {
    let result = super.call("claimableActive", "claimableActive():(bool)", []);

    return result[0].toBoolean();
  }

  try_claimableActive(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "claimableActive",
      "claimableActive():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  contributors(param0: Address): BigInt {
    let result = super.call("contributors", "contributors(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_contributors(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "contributors",
      "contributors(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  contributorsClaimActive(): boolean {
    let result = super.call(
      "contributorsClaimActive",
      "contributorsClaimActive():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_contributorsClaimActive(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "contributorsClaimActive",
      "contributorsClaimActive():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  currentNumLandsMintedPublicSale(): BigInt {
    let result = super.call(
      "currentNumLandsMintedPublicSale",
      "currentNumLandsMintedPublicSale():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_currentNumLandsMintedPublicSale(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "currentNumLandsMintedPublicSale",
      "currentNumLandsMintedPublicSale():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  fee(): BigInt {
    let result = super.call("fee", "fee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_fee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("fee", "fee():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  futureLandsNftIdCurrent(): BigInt {
    let result = super.call(
      "futureLandsNftIdCurrent",
      "futureLandsNftIdCurrent():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_futureLandsNftIdCurrent(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "futureLandsNftIdCurrent",
      "futureLandsNftIdCurrent():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  futureMinter(): Address {
    let result = super.call("futureMinter", "futureMinter():(address)", []);

    return result[0].toAddress();
  }

  try_futureMinter(): ethereum.CallResult<Address> {
    let result = super.tryCall("futureMinter", "futureMinter():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getApproved(tokenId: BigInt): Address {
    let result = super.call("getApproved", "getApproved(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_getApproved(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getApproved",
      "getApproved(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getMintPrice(): BigInt {
    let result = super.call("getMintPrice", "getMintPrice():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getMintPrice(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getMintPrice", "getMintPrice():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isApprovedForAll(owner: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    owner: Address,
    operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isRandomRequestForPublicSaleAndContributors(param0: Bytes): boolean {
    let result = super.call(
      "isRandomRequestForPublicSaleAndContributors",
      "isRandomRequestForPublicSaleAndContributors(bytes32):(bool)",
      [ethereum.Value.fromFixedBytes(param0)]
    );

    return result[0].toBoolean();
  }

  try_isRandomRequestForPublicSaleAndContributors(
    param0: Bytes
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isRandomRequestForPublicSaleAndContributors",
      "isRandomRequestForPublicSaleAndContributors(bytes32):(bool)",
      [ethereum.Value.fromFixedBytes(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  keyHash(): Bytes {
    let result = super.call("keyHash", "keyHash():(bytes32)", []);

    return result[0].toBytes();
  }

  try_keyHash(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("keyHash", "keyHash():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  kycMerkleRoot(): Bytes {
    let result = super.call("kycMerkleRoot", "kycMerkleRoot():(bytes32)", []);

    return result[0].toBytes();
  }

  try_kycMerkleRoot(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "kycMerkleRoot",
      "kycMerkleRoot():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  maxMintPerAddress(): BigInt {
    let result = super.call(
      "maxMintPerAddress",
      "maxMintPerAddress():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_maxMintPerAddress(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "maxMintPerAddress",
      "maxMintPerAddress():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  maxMintPerTx(): BigInt {
    let result = super.call("maxMintPerTx", "maxMintPerTx():(uint256)", []);

    return result[0].toBigInt();
  }

  try_maxMintPerTx(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("maxMintPerTx", "maxMintPerTx():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  metadataHashes(param0: BigInt): Contract__metadataHashesResult {
    let result = super.call(
      "metadataHashes",
      "metadataHashes(uint256):(bytes32,bytes32,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new Contract__metadataHashesResult(
      result[0].toBytes(),
      result[1].toBytes(),
      result[2].toBigInt(),
      result[3].toBigInt()
    );
  }

  try_metadataHashes(
    param0: BigInt
  ): ethereum.CallResult<Contract__metadataHashesResult> {
    let result = super.tryCall(
      "metadataHashes",
      "metadataHashes(uint256):(bytes32,bytes32,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Contract__metadataHashesResult(
        value[0].toBytes(),
        value[1].toBytes(),
        value[2].toBigInt(),
        value[3].toBigInt()
      )
    );
  }

  mintIndexPublicSaleAndContributors(): BigInt {
    let result = super.call(
      "mintIndexPublicSaleAndContributors",
      "mintIndexPublicSaleAndContributors():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_mintIndexPublicSaleAndContributors(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "mintIndexPublicSaleAndContributors",
      "mintIndexPublicSaleAndContributors():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  mintedPerAddress(param0: Address): BigInt {
    let result = super.call(
      "mintedPerAddress",
      "mintedPerAddress(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_mintedPerAddress(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "mintedPerAddress",
      "mintedPerAddress(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  operator(): Address {
    let result = super.call("operator", "operator():(address)", []);

    return result[0].toAddress();
  }

  try_operator(): ethereum.CallResult<Address> {
    let result = super.tryCall("operator", "operator():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ownerClaimRandomnessRequested(): boolean {
    let result = super.call(
      "ownerClaimRandomnessRequested",
      "ownerClaimRandomnessRequested():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_ownerClaimRandomnessRequested(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "ownerClaimRandomnessRequested",
      "ownerClaimRandomnessRequested():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  ownerOf(tokenId: BigInt): Address {
    let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  publicSaleActive(): boolean {
    let result = super.call(
      "publicSaleActive",
      "publicSaleActive():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_publicSaleActive(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "publicSaleActive",
      "publicSaleActive():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  publicSaleAndContributorsOffset(): BigInt {
    let result = super.call(
      "publicSaleAndContributorsOffset",
      "publicSaleAndContributorsOffset():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_publicSaleAndContributorsOffset(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "publicSaleAndContributorsOffset",
      "publicSaleAndContributorsOffset():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  publicSaleAndContributorsRandomnessRequested(): boolean {
    let result = super.call(
      "publicSaleAndContributorsRandomnessRequested",
      "publicSaleAndContributorsRandomnessRequested():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_publicSaleAndContributorsRandomnessRequested(): ethereum.CallResult<
    boolean
  > {
    let result = super.tryCall(
      "publicSaleAndContributorsRandomnessRequested",
      "publicSaleAndContributorsRandomnessRequested():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  publicSaleEndingPrice(): BigInt {
    let result = super.call(
      "publicSaleEndingPrice",
      "publicSaleEndingPrice():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_publicSaleEndingPrice(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "publicSaleEndingPrice",
      "publicSaleEndingPrice():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  publicSalePriceLoweringDuration(): BigInt {
    let result = super.call(
      "publicSalePriceLoweringDuration",
      "publicSalePriceLoweringDuration():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_publicSalePriceLoweringDuration(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "publicSalePriceLoweringDuration",
      "publicSalePriceLoweringDuration():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  publicSaleStartPrice(): BigInt {
    let result = super.call(
      "publicSaleStartPrice",
      "publicSaleStartPrice():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_publicSaleStartPrice(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "publicSaleStartPrice",
      "publicSaleStartPrice():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  publicSaleStartTime(): BigInt {
    let result = super.call(
      "publicSaleStartTime",
      "publicSaleStartTime():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_publicSaleStartTime(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "publicSaleStartTime",
      "publicSaleStartTime():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  requestRandomnessForOwnerClaim(): Bytes {
    let result = super.call(
      "requestRandomnessForOwnerClaim",
      "requestRandomnessForOwnerClaim():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_requestRandomnessForOwnerClaim(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "requestRandomnessForOwnerClaim",
      "requestRandomnessForOwnerClaim():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  requestRandomnessForPublicSaleAndContributors(): Bytes {
    let result = super.call(
      "requestRandomnessForPublicSaleAndContributors",
      "requestRandomnessForPublicSaleAndContributors():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_requestRandomnessForPublicSaleAndContributors(): ethereum.CallResult<
    Bytes
  > {
    let result = super.tryCall(
      "requestRandomnessForPublicSaleAndContributors",
      "requestRandomnessForPublicSaleAndContributors():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tokenByIndex(index: BigInt): BigInt {
    let result = super.call("tokenByIndex", "tokenByIndex(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(index)
    ]);

    return result[0].toBigInt();
  }

  try_tokenByIndex(index: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenByIndex",
      "tokenByIndex(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(index)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenContract(): Address {
    let result = super.call("tokenContract", "tokenContract():(address)", []);

    return result[0].toAddress();
  }

  try_tokenContract(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "tokenContract",
      "tokenContract():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  tokenOfOwnerByIndex(owner: Address, index: BigInt): BigInt {
    let result = super.call(
      "tokenOfOwnerByIndex",
      "tokenOfOwnerByIndex(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );

    return result[0].toBigInt();
  }

  try_tokenOfOwnerByIndex(
    owner: Address,
    index: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenOfOwnerByIndex",
      "tokenOfOwnerByIndex(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenURI(tokenId: BigInt): string {
    let result = super.call("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toString();
  }

  try_tokenURI(tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get symbol(): string {
    return this._call.inputValues[1].value.toString();
  }

  get addresses(): ConstructorCallAddressesStruct {
    return changetype<ConstructorCallAddressesStruct>(
      this._call.inputValues[2].value.toTuple()
    );
  }

  get amount(): ConstructorCallAmountStruct {
    return changetype<ConstructorCallAmountStruct>(
      this._call.inputValues[3].value.toTuple()
    );
  }

  get _contributors(): Array<ConstructorCall_contributorsStruct> {
    return this._call.inputValues[4].value.toTupleArray<
      ConstructorCall_contributorsStruct
    >();
  }

  get _vrfCoordinator(): Address {
    return this._call.inputValues[5].value.toAddress();
  }

  get _linkTokenAddress(): Address {
    return this._call.inputValues[6].value.toAddress();
  }

  get _vrfKeyHash(): Bytes {
    return this._call.inputValues[7].value.toBytes();
  }

  get _vrfFee(): BigInt {
    return this._call.inputValues[8].value.toBigInt();
  }

  get _operator(): Address {
    return this._call.inputValues[9].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCallAddressesStruct extends ethereum.Tuple {
  get alphaContract(): Address {
    return this[0].toAddress();
  }

  get betaContract(): Address {
    return this[1].toAddress();
  }

  get tokenContract(): Address {
    return this[2].toAddress();
  }
}

export class ConstructorCallAmountStruct extends ethereum.Tuple {
  get alpha(): BigInt {
    return this[0].toBigInt();
  }

  get beta(): BigInt {
    return this[1].toBigInt();
  }

  get publicSale(): BigInt {
    return this[2].toBigInt();
  }

  get future(): BigInt {
    return this[3].toBigInt();
  }
}

export class ConstructorCall_contributorsStruct extends ethereum.Tuple {
  get contributor(): Address {
    return this[0].toAddress();
  }

  get amount(): BigInt {
    return this[1].toBigInt();
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class ClaimUnclaimedAndUnsoldLandsCall extends ethereum.Call {
  get inputs(): ClaimUnclaimedAndUnsoldLandsCall__Inputs {
    return new ClaimUnclaimedAndUnsoldLandsCall__Inputs(this);
  }

  get outputs(): ClaimUnclaimedAndUnsoldLandsCall__Outputs {
    return new ClaimUnclaimedAndUnsoldLandsCall__Outputs(this);
  }
}

export class ClaimUnclaimedAndUnsoldLandsCall__Inputs {
  _call: ClaimUnclaimedAndUnsoldLandsCall;

  constructor(call: ClaimUnclaimedAndUnsoldLandsCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ClaimUnclaimedAndUnsoldLandsCall__Outputs {
  _call: ClaimUnclaimedAndUnsoldLandsCall;

  constructor(call: ClaimUnclaimedAndUnsoldLandsCall) {
    this._call = call;
  }
}

export class ClaimUnclaimedAndUnsoldLandsWithAmountCall extends ethereum.Call {
  get inputs(): ClaimUnclaimedAndUnsoldLandsWithAmountCall__Inputs {
    return new ClaimUnclaimedAndUnsoldLandsWithAmountCall__Inputs(this);
  }

  get outputs(): ClaimUnclaimedAndUnsoldLandsWithAmountCall__Outputs {
    return new ClaimUnclaimedAndUnsoldLandsWithAmountCall__Outputs(this);
  }
}

export class ClaimUnclaimedAndUnsoldLandsWithAmountCall__Inputs {
  _call: ClaimUnclaimedAndUnsoldLandsWithAmountCall;

  constructor(call: ClaimUnclaimedAndUnsoldLandsWithAmountCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get maxAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ClaimUnclaimedAndUnsoldLandsWithAmountCall__Outputs {
  _call: ClaimUnclaimedAndUnsoldLandsWithAmountCall;

  constructor(call: ClaimUnclaimedAndUnsoldLandsWithAmountCall) {
    this._call = call;
  }
}

export class ContributorsClaimLandCall extends ethereum.Call {
  get inputs(): ContributorsClaimLandCall__Inputs {
    return new ContributorsClaimLandCall__Inputs(this);
  }

  get outputs(): ContributorsClaimLandCall__Outputs {
    return new ContributorsClaimLandCall__Outputs(this);
  }
}

export class ContributorsClaimLandCall__Inputs {
  _call: ContributorsClaimLandCall;

  constructor(call: ContributorsClaimLandCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get recipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ContributorsClaimLandCall__Outputs {
  _call: ContributorsClaimLandCall;

  constructor(call: ContributorsClaimLandCall) {
    this._call = call;
  }
}

export class FlipClaimableStateCall extends ethereum.Call {
  get inputs(): FlipClaimableStateCall__Inputs {
    return new FlipClaimableStateCall__Inputs(this);
  }

  get outputs(): FlipClaimableStateCall__Outputs {
    return new FlipClaimableStateCall__Outputs(this);
  }
}

export class FlipClaimableStateCall__Inputs {
  _call: FlipClaimableStateCall;

  constructor(call: FlipClaimableStateCall) {
    this._call = call;
  }
}

export class FlipClaimableStateCall__Outputs {
  _call: FlipClaimableStateCall;

  constructor(call: FlipClaimableStateCall) {
    this._call = call;
  }
}

export class LoadLandMetadataCall extends ethereum.Call {
  get inputs(): LoadLandMetadataCall__Inputs {
    return new LoadLandMetadataCall__Inputs(this);
  }

  get outputs(): LoadLandMetadataCall__Outputs {
    return new LoadLandMetadataCall__Outputs(this);
  }
}

export class LoadLandMetadataCall__Inputs {
  _call: LoadLandMetadataCall;

  constructor(call: LoadLandMetadataCall) {
    this._call = call;
  }

  get _landMetadata(): LoadLandMetadataCall_landMetadataStruct {
    return changetype<LoadLandMetadataCall_landMetadataStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class LoadLandMetadataCall__Outputs {
  _call: LoadLandMetadataCall;

  constructor(call: LoadLandMetadataCall) {
    this._call = call;
  }
}

export class LoadLandMetadataCall_landMetadataStruct extends ethereum.Tuple {
  get metadataHash(): Bytes {
    return this[0].toBytes();
  }

  get shuffledArrayHash(): Bytes {
    return this[1].toBytes();
  }

  get startIndex(): BigInt {
    return this[2].toBigInt();
  }

  get endIndex(): BigInt {
    return this[3].toBigInt();
  }
}

export class MintFutureLandsCall extends ethereum.Call {
  get inputs(): MintFutureLandsCall__Inputs {
    return new MintFutureLandsCall__Inputs(this);
  }

  get outputs(): MintFutureLandsCall__Outputs {
    return new MintFutureLandsCall__Outputs(this);
  }
}

export class MintFutureLandsCall__Inputs {
  _call: MintFutureLandsCall;

  constructor(call: MintFutureLandsCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class MintFutureLandsCall__Outputs {
  _call: MintFutureLandsCall;

  constructor(call: MintFutureLandsCall) {
    this._call = call;
  }
}

export class MintFutureLandsWithAmountCall extends ethereum.Call {
  get inputs(): MintFutureLandsWithAmountCall__Inputs {
    return new MintFutureLandsWithAmountCall__Inputs(this);
  }

  get outputs(): MintFutureLandsWithAmountCall__Outputs {
    return new MintFutureLandsWithAmountCall__Outputs(this);
  }
}

export class MintFutureLandsWithAmountCall__Inputs {
  _call: MintFutureLandsWithAmountCall;

  constructor(call: MintFutureLandsWithAmountCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get maxAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class MintFutureLandsWithAmountCall__Outputs {
  _call: MintFutureLandsWithAmountCall;

  constructor(call: MintFutureLandsWithAmountCall) {
    this._call = call;
  }
}

export class MintLandsCall extends ethereum.Call {
  get inputs(): MintLandsCall__Inputs {
    return new MintLandsCall__Inputs(this);
  }

  get outputs(): MintLandsCall__Outputs {
    return new MintLandsCall__Outputs(this);
  }
}

export class MintLandsCall__Inputs {
  _call: MintLandsCall;

  constructor(call: MintLandsCall) {
    this._call = call;
  }

  get numLands(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get merkleProof(): Array<Bytes> {
    return this._call.inputValues[1].value.toBytesArray();
  }
}

export class MintLandsCall__Outputs {
  _call: MintLandsCall;

  constructor(call: MintLandsCall) {
    this._call = call;
  }
}

export class NftOwnerClaimLandCall extends ethereum.Call {
  get inputs(): NftOwnerClaimLandCall__Inputs {
    return new NftOwnerClaimLandCall__Inputs(this);
  }

  get outputs(): NftOwnerClaimLandCall__Outputs {
    return new NftOwnerClaimLandCall__Outputs(this);
  }
}

export class NftOwnerClaimLandCall__Inputs {
  _call: NftOwnerClaimLandCall;

  constructor(call: NftOwnerClaimLandCall) {
    this._call = call;
  }

  get alphaTokenIds(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }

  get betaTokenIds(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }
}

export class NftOwnerClaimLandCall__Outputs {
  _call: NftOwnerClaimLandCall;

  constructor(call: NftOwnerClaimLandCall) {
    this._call = call;
  }
}

export class PutLandMetadataAtIndexCall extends ethereum.Call {
  get inputs(): PutLandMetadataAtIndexCall__Inputs {
    return new PutLandMetadataAtIndexCall__Inputs(this);
  }

  get outputs(): PutLandMetadataAtIndexCall__Outputs {
    return new PutLandMetadataAtIndexCall__Outputs(this);
  }
}

export class PutLandMetadataAtIndexCall__Inputs {
  _call: PutLandMetadataAtIndexCall;

  constructor(call: PutLandMetadataAtIndexCall) {
    this._call = call;
  }

  get index(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _landMetadata(): PutLandMetadataAtIndexCall_landMetadataStruct {
    return changetype<PutLandMetadataAtIndexCall_landMetadataStruct>(
      this._call.inputValues[1].value.toTuple()
    );
  }
}

export class PutLandMetadataAtIndexCall__Outputs {
  _call: PutLandMetadataAtIndexCall;

  constructor(call: PutLandMetadataAtIndexCall) {
    this._call = call;
  }
}

export class PutLandMetadataAtIndexCall_landMetadataStruct extends ethereum.Tuple {
  get metadataHash(): Bytes {
    return this[0].toBytes();
  }

  get shuffledArrayHash(): Bytes {
    return this[1].toBytes();
  }

  get startIndex(): BigInt {
    return this[2].toBigInt();
  }

  get endIndex(): BigInt {
    return this[3].toBigInt();
  }
}

export class RawFulfillRandomnessCall extends ethereum.Call {
  get inputs(): RawFulfillRandomnessCall__Inputs {
    return new RawFulfillRandomnessCall__Inputs(this);
  }

  get outputs(): RawFulfillRandomnessCall__Outputs {
    return new RawFulfillRandomnessCall__Outputs(this);
  }
}

export class RawFulfillRandomnessCall__Inputs {
  _call: RawFulfillRandomnessCall;

  constructor(call: RawFulfillRandomnessCall) {
    this._call = call;
  }

  get requestId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get randomness(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class RawFulfillRandomnessCall__Outputs {
  _call: RawFulfillRandomnessCall;

  constructor(call: RawFulfillRandomnessCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RequestRandomnessForOwnerClaimCall extends ethereum.Call {
  get inputs(): RequestRandomnessForOwnerClaimCall__Inputs {
    return new RequestRandomnessForOwnerClaimCall__Inputs(this);
  }

  get outputs(): RequestRandomnessForOwnerClaimCall__Outputs {
    return new RequestRandomnessForOwnerClaimCall__Outputs(this);
  }
}

export class RequestRandomnessForOwnerClaimCall__Inputs {
  _call: RequestRandomnessForOwnerClaimCall;

  constructor(call: RequestRandomnessForOwnerClaimCall) {
    this._call = call;
  }
}

export class RequestRandomnessForOwnerClaimCall__Outputs {
  _call: RequestRandomnessForOwnerClaimCall;

  constructor(call: RequestRandomnessForOwnerClaimCall) {
    this._call = call;
  }

  get requestId(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class RequestRandomnessForPublicSaleAndContributorsCall extends ethereum.Call {
  get inputs(): RequestRandomnessForPublicSaleAndContributorsCall__Inputs {
    return new RequestRandomnessForPublicSaleAndContributorsCall__Inputs(this);
  }

  get outputs(): RequestRandomnessForPublicSaleAndContributorsCall__Outputs {
    return new RequestRandomnessForPublicSaleAndContributorsCall__Outputs(this);
  }
}

export class RequestRandomnessForPublicSaleAndContributorsCall__Inputs {
  _call: RequestRandomnessForPublicSaleAndContributorsCall;

  constructor(call: RequestRandomnessForPublicSaleAndContributorsCall) {
    this._call = call;
  }
}

export class RequestRandomnessForPublicSaleAndContributorsCall__Outputs {
  _call: RequestRandomnessForPublicSaleAndContributorsCall;

  constructor(call: RequestRandomnessForPublicSaleAndContributorsCall) {
    this._call = call;
  }

  get requestId(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFrom1Call extends ethereum.Call {
  get inputs(): SafeTransferFrom1Call__Inputs {
    return new SafeTransferFrom1Call__Inputs(this);
  }

  get outputs(): SafeTransferFrom1Call__Outputs {
    return new SafeTransferFrom1Call__Outputs(this);
  }
}

export class SafeTransferFrom1Call__Inputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SafeTransferFrom1Call__Outputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class SetBaseURICall extends ethereum.Call {
  get inputs(): SetBaseURICall__Inputs {
    return new SetBaseURICall__Inputs(this);
  }

  get outputs(): SetBaseURICall__Outputs {
    return new SetBaseURICall__Outputs(this);
  }
}

export class SetBaseURICall__Inputs {
  _call: SetBaseURICall;

  constructor(call: SetBaseURICall) {
    this._call = call;
  }

  get uri(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class SetBaseURICall__Outputs {
  _call: SetBaseURICall;

  constructor(call: SetBaseURICall) {
    this._call = call;
  }
}

export class SetFutureMinterCall extends ethereum.Call {
  get inputs(): SetFutureMinterCall__Inputs {
    return new SetFutureMinterCall__Inputs(this);
  }

  get outputs(): SetFutureMinterCall__Outputs {
    return new SetFutureMinterCall__Outputs(this);
  }
}

export class SetFutureMinterCall__Inputs {
  _call: SetFutureMinterCall;

  constructor(call: SetFutureMinterCall) {
    this._call = call;
  }

  get _futureMinter(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetFutureMinterCall__Outputs {
  _call: SetFutureMinterCall;

  constructor(call: SetFutureMinterCall) {
    this._call = call;
  }
}

export class SetKycCheckRequiredCall extends ethereum.Call {
  get inputs(): SetKycCheckRequiredCall__Inputs {
    return new SetKycCheckRequiredCall__Inputs(this);
  }

  get outputs(): SetKycCheckRequiredCall__Outputs {
    return new SetKycCheckRequiredCall__Outputs(this);
  }
}

export class SetKycCheckRequiredCall__Inputs {
  _call: SetKycCheckRequiredCall;

  constructor(call: SetKycCheckRequiredCall) {
    this._call = call;
  }

  get _isKycCheckRequired(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class SetKycCheckRequiredCall__Outputs {
  _call: SetKycCheckRequiredCall;

  constructor(call: SetKycCheckRequiredCall) {
    this._call = call;
  }
}

export class SetKycMerkleRootCall extends ethereum.Call {
  get inputs(): SetKycMerkleRootCall__Inputs {
    return new SetKycMerkleRootCall__Inputs(this);
  }

  get outputs(): SetKycMerkleRootCall__Outputs {
    return new SetKycMerkleRootCall__Outputs(this);
  }
}

export class SetKycMerkleRootCall__Inputs {
  _call: SetKycMerkleRootCall;

  constructor(call: SetKycMerkleRootCall) {
    this._call = call;
  }

  get _kycMerkleRoot(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class SetKycMerkleRootCall__Outputs {
  _call: SetKycMerkleRootCall;

  constructor(call: SetKycMerkleRootCall) {
    this._call = call;
  }
}

export class SetMaxMintPerAddressCall extends ethereum.Call {
  get inputs(): SetMaxMintPerAddressCall__Inputs {
    return new SetMaxMintPerAddressCall__Inputs(this);
  }

  get outputs(): SetMaxMintPerAddressCall__Outputs {
    return new SetMaxMintPerAddressCall__Outputs(this);
  }
}

export class SetMaxMintPerAddressCall__Inputs {
  _call: SetMaxMintPerAddressCall;

  constructor(call: SetMaxMintPerAddressCall) {
    this._call = call;
  }

  get _maxMintPerAddress(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetMaxMintPerAddressCall__Outputs {
  _call: SetMaxMintPerAddressCall;

  constructor(call: SetMaxMintPerAddressCall) {
    this._call = call;
  }
}

export class SetMaxMintPerTxCall extends ethereum.Call {
  get inputs(): SetMaxMintPerTxCall__Inputs {
    return new SetMaxMintPerTxCall__Inputs(this);
  }

  get outputs(): SetMaxMintPerTxCall__Outputs {
    return new SetMaxMintPerTxCall__Outputs(this);
  }
}

export class SetMaxMintPerTxCall__Inputs {
  _call: SetMaxMintPerTxCall;

  constructor(call: SetMaxMintPerTxCall) {
    this._call = call;
  }

  get _maxMintPerTx(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetMaxMintPerTxCall__Outputs {
  _call: SetMaxMintPerTxCall;

  constructor(call: SetMaxMintPerTxCall) {
    this._call = call;
  }
}

export class SetOperatorCall extends ethereum.Call {
  get inputs(): SetOperatorCall__Inputs {
    return new SetOperatorCall__Inputs(this);
  }

  get outputs(): SetOperatorCall__Outputs {
    return new SetOperatorCall__Outputs(this);
  }
}

export class SetOperatorCall__Inputs {
  _call: SetOperatorCall;

  constructor(call: SetOperatorCall) {
    this._call = call;
  }

  get _operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetOperatorCall__Outputs {
  _call: SetOperatorCall;

  constructor(call: SetOperatorCall) {
    this._call = call;
  }
}

export class StartContributorsClaimPeriodCall extends ethereum.Call {
  get inputs(): StartContributorsClaimPeriodCall__Inputs {
    return new StartContributorsClaimPeriodCall__Inputs(this);
  }

  get outputs(): StartContributorsClaimPeriodCall__Outputs {
    return new StartContributorsClaimPeriodCall__Outputs(this);
  }
}

export class StartContributorsClaimPeriodCall__Inputs {
  _call: StartContributorsClaimPeriodCall;

  constructor(call: StartContributorsClaimPeriodCall) {
    this._call = call;
  }
}

export class StartContributorsClaimPeriodCall__Outputs {
  _call: StartContributorsClaimPeriodCall;

  constructor(call: StartContributorsClaimPeriodCall) {
    this._call = call;
  }
}

export class StartPublicSaleCall extends ethereum.Call {
  get inputs(): StartPublicSaleCall__Inputs {
    return new StartPublicSaleCall__Inputs(this);
  }

  get outputs(): StartPublicSaleCall__Outputs {
    return new StartPublicSaleCall__Outputs(this);
  }
}

export class StartPublicSaleCall__Inputs {
  _call: StartPublicSaleCall;

  constructor(call: StartPublicSaleCall) {
    this._call = call;
  }

  get _publicSalePriceLoweringDuration(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _publicSaleStartPrice(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _publicSaleEndingPrice(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _maxMintPerTx(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _maxMintPerAddress(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _isKycCheckRequired(): boolean {
    return this._call.inputValues[5].value.toBoolean();
  }
}

export class StartPublicSaleCall__Outputs {
  _call: StartPublicSaleCall;

  constructor(call: StartPublicSaleCall) {
    this._call = call;
  }
}

export class StopContributorsClaimPeriodCall extends ethereum.Call {
  get inputs(): StopContributorsClaimPeriodCall__Inputs {
    return new StopContributorsClaimPeriodCall__Inputs(this);
  }

  get outputs(): StopContributorsClaimPeriodCall__Outputs {
    return new StopContributorsClaimPeriodCall__Outputs(this);
  }
}

export class StopContributorsClaimPeriodCall__Inputs {
  _call: StopContributorsClaimPeriodCall;

  constructor(call: StopContributorsClaimPeriodCall) {
    this._call = call;
  }
}

export class StopContributorsClaimPeriodCall__Outputs {
  _call: StopContributorsClaimPeriodCall;

  constructor(call: StopContributorsClaimPeriodCall) {
    this._call = call;
  }
}

export class StopPublicSaleCall extends ethereum.Call {
  get inputs(): StopPublicSaleCall__Inputs {
    return new StopPublicSaleCall__Inputs(this);
  }

  get outputs(): StopPublicSaleCall__Outputs {
    return new StopPublicSaleCall__Outputs(this);
  }
}

export class StopPublicSaleCall__Inputs {
  _call: StopPublicSaleCall;

  constructor(call: StopPublicSaleCall) {
    this._call = call;
  }
}

export class StopPublicSaleCall__Outputs {
  _call: StopPublicSaleCall;

  constructor(call: StopPublicSaleCall) {
    this._call = call;
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}
