type BaseMetric @entity {
  id: ID!
  type: EventType!
  transactionMetadata: TransactionMetadata!
  params: MetricParam
}

type TransactionMetadata @entity {
  id: ID! # The TxHash toHex()
  txValue: BigInt!
  timestamp: BigInt!
  blockNumber: BigInt!
  txTo: Bytes
  txFrom: Bytes!
  txGas: BigInt!
}

type InMemoryIncrementStore @entity {
  id: ID! # Always 1 =  store this const in the mapping and always just retrieve it - then incrementValue++ when new even
  incrementValue: BigInt!
}

type EventType @entity {
  id: ID! #ToHex of EventName
}

type MetricParam @entity {
  id: ID!

  paramName1: String
  paramValue1: String
  paramType1: String

  paramName2: String
  paramValue2: String
  paramType2: String

  paramName3: String
  paramValue3: String
  paramType3: String

  paramName4: String
  paramValue4: String
  paramType4: String

  paramName5: String
  paramValue5: String
  paramType5: String

  paramName6: String
  paramValue6: String
  paramType6: String

   paramName7: String
  paramValue7: String
  paramType7: String

  paramName8: String
  paramValue8: String
  paramType8: String

  paramName9: String
  paramValue9: String
  paramType9: String

  paramName10: String
  paramValue10: String
  paramType10: String

  paramName11: String
  paramValue11: String
  paramType11: String

  paramName12: String
  paramValue12: String
  paramType12: String

  paramName13: String
  paramValue13: String
  paramType13: String
}

type BadgeType @entity {
  id: ID!
  name: String! #The Badge
  ipfs: String! #The
  soul: BigInt!
  linkingParam: String! # This is what ties a baseMetric to a user
  baseMetric: [BadgeMetricLookup!] #The base
}

type BadgeMetricLookup @entity {
  id: ID! #Combination of BaseMetric ID + BaseID
  badge: BadgeType! #Combination of
  baseMetric: BaseMetric!
}

type UserBadge @entity {
  id: ID! #BadgeTypeID + UserAddress
  badge: BadgeType! #Combination of
  account: Bytes!
  vanityValue: Bytes! # HOW MUCH THEY HAVE CURATED IN TOTALITY
  vanityName: Bytes! #
}
